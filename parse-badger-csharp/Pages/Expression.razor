@page "/expression"

<h1>Expression</h1>

<EditForm Model="@expressionModel" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-section">
        <InputText id="expression" @bind-Value="expressionModel.Expression" />
    </div>

    <h5>Parameters</h5>

    <div class="form-section">
        <button @onclick="HandleAddParameter">Add Parameter</button>
    </div>

    @foreach (var item in expressionModel.Parameters)
    {
        <div class="form-section">
            <label asp-for="name">Parameter name</label>
            <InputText id="name" @bind-Value="item.Name" />
            <label asp-for="value">Parameter value</label>
            <InputText id="value" @bind-Value="item.Value" />
            <button @onclick="@(e => HandleDeleteParameter(item))">Delete</button>
        </div>
    }

    <button type="Submit">Submit</button>
</EditForm>

<p>@result</p>

@code {
    private ExpressionModel expressionModel = new ExpressionModel();

    private string result = "";

    private void HandleAddParameter()
    {
        expressionModel.Parameters.Add(new ExpressionParameterModel());
    }

    private void HandleDeleteParameter(ExpressionParameterModel item)
    {
        expressionModel.Parameters.Remove(item);
    }

    private void HandleInvalidSubmit()
    {
        result = "";
    }

    private void HandleValidSubmit()
    {
        try
        {
            var expression = new NCalc.Expression(expressionModel.Expression);
            foreach (var item in expressionModel.Parameters)
            {
                expression.Parameters[item.Name] = new NCalc.Expression(item.Value);
            }

            result = $"Result: {expression.Evaluate()}";
        }
        catch (Exception e)
        {
            result = $"Error: {e.Message}";
        }
    }
}